import os.path
import requests
import functools
from modules.util import get_environ_file_path


# Not using decorator package because of exception generation on calling decorated function
# (which appear to have missing argument when called - this missing argument is generated by decorator: cls._init_req())
def api_request(function):
    @functools.wraps(function)
    def wrapper(cls, *args, **kwargs):
        """
        :param cls: ApiHandler class
        """
        try:
            cls._auth_key_file() if not cls._is_auth_key() else None
            return function(cls, cls._init_req(), *args, **kwargs)
        except KeyError as e:
            raise Exception('Request cannot be performed due to authentication key missing.').\
                with_traceback(e.__traceback__)
    return wrapper


class ApiHandler:

    __AUTH_KEY = None

    @classmethod
    def _is_auth_key(cls):
        """
        Checks if authentication key is already read into application
        :return: True or False
        """
        return True if cls.__AUTH_KEY else False

    @classmethod
    def _auth_key_file(cls):
        """
        Gets authentication key from file defined by environment variable 'APISTOCK_KEY_FILE'
        """
        try:
            # root_path is parent folder of folder containing api_handler.py
            root_path = os.path.dirname(os.path.realpath(__file__))
            root_path = os.path.dirname(root_path)
            file_path = get_environ_file_path("APISTOCK_KEY_FILE",
                                              root_path=root_path)
            with open(file_path) as f_r:
                key = f_r.readline()
                if key:
                    cls.__AUTH_KEY = key
                else:
                    raise KeyError(f"File {file_path} does not contain valid authentication key!")
        except KeyError as e:
            raise Exception('Check README.md file for more information.').with_traceback(e.__traceback__)

    @classmethod
    def _init_req(cls) -> requests.Session:
        s = requests.Session()
        s.headers.update({"X-Finnhub-Token": cls.__AUTH_KEY})
        return s

    @classmethod
    @api_request
    def request_test(cls, request: requests.Session):
        # api_url = "https://finnhub.io/api/v1/search"
        api_url = "https://finnhub.io/api/v1/search?q=apple"
        response = request.get(api_url)
        print(response.json()["result"])


if __name__ == "__main__":
    ApiHandler.request_test()
